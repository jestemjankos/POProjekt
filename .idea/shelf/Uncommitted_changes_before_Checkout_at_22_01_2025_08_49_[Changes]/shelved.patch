Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"b521ed67-1063-4a55-a372-32ae2573f1e4\" name=\"Changes\" comment=\"\">\r\n      <change afterPath=\"$PROJECT_DIR$/src/BlackJack.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/src/krupier.png\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/BlackjackFrame.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/BlackjackFrame.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/kolkoKrzyzyk.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/kolkoKrzyzyk.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"kosci\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 3\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2qqrNEpT59PGsAW3jFjTYEl05w1\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Application.BlackJack.executor\": \"Run\",\r\n    \"Application.BlackjackFrame.executor\": \"Run\",\r\n    \"Application.kolkoKrzyzyk.executor\": \"Run\",\r\n    \"Application.mainMenu.executor\": \"Run\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"git-widget-placeholder\": \"bj\",\r\n    \"kotlin-language-version-configured\": \"true\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"onboarding.tips.debug.path\": \"C:/Users/macie/IdeaProjects/projektPO/src/Main.java\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\Użytkownik\\Documents\\GitHub\\POProjekt\\src\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"b521ed67-1063-4a55-a372-32ae2573f1e4\" name=\"Changes\" comment=\"\" />\r\n      <created>1735400905548</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1735400905548</updated>\r\n      <workItem from=\"1735400906617\" duration=\"1000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/src/Main.java</url>\r\n          <line>11</line>\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 5211e1dd1cfc3cb0cc5a9ecf68b5e38baeb04725)
+++ b/.idea/workspace.xml	(date 1737514582986)
@@ -5,11 +5,20 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="b521ed67-1063-4a55-a372-32ae2573f1e4" name="Changes" comment="">
-      <change afterPath="$PROJECT_DIR$/src/BlackJack.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/src/krupier.png" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/BlackJackGame.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/BlackJackUI.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/Card.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/DealerHand.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/Deck.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/EndState.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/GameState.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/Hand.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/InitialState.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/PlayerHand.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/PlayingState.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/src/SwingBlackJackUI.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/BlackjackFrame.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/BlackjackFrame.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/kolkoKrzyzyk.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/kolkoKrzyzyk.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/BlackJack.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/BlackJack.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -19,6 +28,7 @@
   <component name="FileTemplateManagerImpl">
     <option name="RECENT_TEMPLATES">
       <list>
+        <option value="Interface" />
         <option value="Class" />
       </list>
     </option>
Index: src/BlackJack.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.awt.*;\r\nimport java.awt.event.*;\r\nimport java.util.ArrayList;\r\nimport java.util.Random;\r\nimport javax.swing.*;\r\n\r\npublic class BlackJack {\r\n    private class Card {\r\n        String value;\r\n        String type;\r\n\r\n        Card(String value, String type) {\r\n            this.value = value;\r\n            this.type = type;\r\n        }\r\n\r\n        public String toString() {\r\n            return value + \"-\" + type;\r\n        }\r\n\r\n        public int getValue() {\r\n            if (\"AJQK\".contains(value)) {\r\n                if (value.equals(\"A\")) {\r\n                    return 11;\r\n                }\r\n                return 10;\r\n            }\r\n            return Integer.parseInt(value);\r\n        }\r\n\r\n        public boolean isAce() {\r\n            return value.equals(\"A\");\r\n        }\r\n\r\n        public String getImagePath() {\r\n            return \"./karty/\" + toString() + \".png\";\r\n        }\r\n    }\r\n\r\n    ArrayList<Card> deck;\r\n    Random random = new Random();\r\n\r\n    Card hiddenCard;\r\n    ArrayList<Card> dealerHand;\r\n    int dealerSum;\r\n    int dealerAceCount;\r\n\r\n    ArrayList<Card> playerHand;\r\n    int playerSum;\r\n    int playerAceCount;\r\n\r\n    int boardWidth = 600;\r\n    int boardHeight = boardWidth;\r\n\r\n    int cardWidth = 110;\r\n    int cardHeight = 154;\r\n\r\n    boolean gameStarted = false;\r\n    boolean gameEnded = false;\r\n    boolean playerCardsRevealed = false;\r\n\r\n    JFrame frame = new JFrame(\"Black Jack\");\r\n    JPanel gamePanel = new JPanel() {\r\n        @Override\r\n        public void paintComponent(Graphics g) {\r\n            super.paintComponent(g);\r\n\r\n            try {\r\n                Image backImg = new ImageIcon(getClass().getResource(\"./karty/BACK.png\")).getImage();\r\n\r\n                // Pierwsza karta krupiera (widoczna po kliknięciu Zagraj)\r\n                if (playerCardsRevealed) {\r\n                    Card visibleCard = dealerHand.get(0);\r\n                    Image cardImg = new ImageIcon(getClass().getResource(visibleCard.getImagePath())).getImage();\r\n                    g.drawImage(cardImg, 20, 20, cardWidth, cardHeight, null);\r\n                } else {\r\n                    g.drawImage(backImg, 20, 20, cardWidth, cardHeight, null);\r\n                }\r\n\r\n                // Druga karta krupiera (ukryta do końca gry)\r\n                if (gameEnded && playerCardsRevealed) {\r\n                    Image hiddenCardImg = new ImageIcon(getClass().getResource(hiddenCard.getImagePath())).getImage();\r\n                    g.drawImage(hiddenCardImg, cardWidth + 25, 20, cardWidth, cardHeight, null);\r\n                } else {\r\n                    g.drawImage(backImg, cardWidth + 25, 20, cardWidth, cardHeight, null);\r\n                }\r\n\r\n                // Dodatkowe karty krupiera\r\n                for (int i = 1; i < dealerHand.size(); i++) {\r\n                    if (gameEnded) {\r\n                        Card card = dealerHand.get(i);\r\n                        Image cardImg = new ImageIcon(getClass().getResource(card.getImagePath())).getImage();\r\n                        g.drawImage(cardImg, cardWidth + 25 + (cardWidth + 5) * i, 20, cardWidth, cardHeight, null);\r\n                    } else {\r\n                        g.drawImage(backImg, cardWidth + 25 + (cardWidth + 5) * i, 20, cardWidth, cardHeight, null);\r\n                    }\r\n                }\r\n\r\n                // Karty gracza\r\n                for (int i = 0; i < playerHand.size(); i++) {\r\n                    if (playerCardsRevealed) {\r\n                        Card card = playerHand.get(i);\r\n                        Image cardImg = new ImageIcon(getClass().getResource(card.getImagePath())).getImage();\r\n                        g.drawImage(cardImg, 20 + (cardWidth + 5) * i, 320, cardWidth, cardHeight, null);\r\n                    } else {\r\n                        g.drawImage(backImg, 20 + (cardWidth + 5) * i, 320, cardWidth, cardHeight, null);\r\n                    }\r\n                }\r\n\r\n                // Game results\r\n                if (gameEnded) {\r\n                    String message = \"\";\r\n                    if (playerSum > 21) {\r\n                        message = \"You Lose!\";\r\n                    } else if (!stayButton.isEnabled()) {\r\n                        dealerSum = reduceDealerAce();\r\n                        playerSum = reducePlayerAce();\r\n\r\n                        if (dealerSum > 21) {\r\n                            message = \"You Win!\";\r\n                        } else if (playerSum == dealerSum) {\r\n                            message = \"Tie!\";\r\n                        } else if (playerSum > dealerSum) {\r\n                            message = \"You Win!\";\r\n                        } else if (playerSum < dealerSum) {\r\n                            message = \"You Lose!\";\r\n                        }\r\n                    }\r\n\r\n                    if (!message.isEmpty()) {\r\n                        g.setFont(new Font(\"Arial\", Font.PLAIN, 30));\r\n                        g.setColor(Color.white);\r\n                        g.drawString(message, 220, 250);\r\n                    }\r\n                }\r\n\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    };\r\n\r\n    JPanel buttonPanel = new JPanel();\r\n    JButton playButton = new JButton(\"Zagraj\");\r\n    JButton hitButton = new JButton(\"Hit\");\r\n    JButton stayButton = new JButton(\"Stay\");\r\n    JButton replayButton = new JButton(\"Play Again\");\r\n    JButton wrocButton = new JButton(\"Wróć do kasyna\");\r\n\r\n    BlackJack() {\r\n        startGame();\r\n\r\n        frame.setVisible(true);\r\n        frame.setSize(boardWidth, boardHeight);\r\n        frame.setLocationRelativeTo(null);\r\n        frame.setResizable(false);\r\n        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n\r\n        gamePanel.setLayout(new BorderLayout());\r\n        gamePanel.setBackground(new Color(53, 101, 77));\r\n        frame.add(gamePanel);\r\n\r\n        buttonPanel.add(hitButton);\r\n        buttonPanel.add(stayButton);\r\n        buttonPanel.add(replayButton);\r\n        buttonPanel.add(wrocButton);\r\n        buttonPanel.add(playButton);\r\n        frame.add(buttonPanel, BorderLayout.SOUTH);\r\n\r\n        hitButton.setEnabled(false);\r\n        stayButton.setEnabled(false);\r\n        replayButton.setEnabled(false);\r\n        wrocButton.setEnabled(false);\r\n        playButton.setEnabled(true);\r\n\r\n        hitButton.addActionListener(new ActionListener() {\r\n            public void actionPerformed(ActionEvent e) {\r\n                Card card = deck.remove(deck.size() - 1);\r\n                playerHand.add(card);\r\n                playerSum += card.getValue();\r\n                playerAceCount += card.isAce() ? 1 : 0;\r\n                playerSum = reducePlayerAce();\r\n\r\n                if (playerSum > 21) {\r\n                    hitButton.setEnabled(false);\r\n                    stayButton.setEnabled(false);\r\n                    replayButton.setEnabled(true);\r\n                    wrocButton.setEnabled(true);\r\n                    gameEnded = true;\r\n                }\r\n                gamePanel.repaint();\r\n            }\r\n        });\r\n\r\n        stayButton.addActionListener(new ActionListener() {\r\n            public void actionPerformed(ActionEvent e) {\r\n                hitButton.setEnabled(false);\r\n                stayButton.setEnabled(false);\r\n                replayButton.setEnabled(true);\r\n                wrocButton.setEnabled(true);\r\n\r\n                while (dealerSum < 17) {\r\n                    Card card = deck.remove(deck.size() - 1);\r\n                    dealerHand.add(card);\r\n                    dealerSum += card.getValue();\r\n                    dealerAceCount += card.isAce() ? 1 : 0;\r\n                    dealerSum = reduceDealerAce();\r\n                }\r\n\r\n                gameEnded = true;\r\n                gamePanel.repaint();\r\n            }\r\n        });\r\n\r\n        replayButton.addActionListener(new ActionListener() {\r\n            public void actionPerformed(ActionEvent e) {\r\n                resetGame();\r\n                gamePanel.repaint();\r\n            }\r\n        });\r\n\r\n        wrocButton.addActionListener(new ActionListener() {\r\n            public void actionPerformed(ActionEvent e) {\r\n                new mainMenu();\r\n                frame.dispose();\r\n            }\r\n        });\r\n\r\n        playButton.addActionListener(new ActionListener() {\r\n            public void actionPerformed(ActionEvent e) {\r\n                gameStarted = true;\r\n                playerCardsRevealed = true;\r\n                hitButton.setEnabled(true);\r\n                stayButton.setEnabled(true);\r\n                playButton.setEnabled(false);\r\n                replayButton.setEnabled(false);\r\n                gamePanel.repaint();\r\n            }\r\n        });\r\n\r\n        gamePanel.repaint();\r\n    }\r\n\r\n    public void startGame() {\r\n        buildDeck();\r\n        shuffleDeck();\r\n\r\n        dealerHand = new ArrayList<Card>();\r\n        dealerSum = 0;\r\n        dealerAceCount = 0;\r\n\r\n        // Pierwsza karta krupiera (będzie widoczna)\r\n        Card visibleCard = deck.remove(deck.size() - 1);\r\n        dealerSum += visibleCard.getValue();\r\n        dealerAceCount += visibleCard.isAce() ? 1 : 0;\r\n        dealerHand.add(visibleCard);\r\n\r\n        // Druga karta krupiera (ukryta)\r\n        hiddenCard = deck.remove(deck.size() - 1);\r\n        dealerSum += hiddenCard.getValue();\r\n        dealerAceCount += hiddenCard.isAce() ? 1 : 0;\r\n\r\n        playerHand = new ArrayList<Card>();\r\n        playerSum = 0;\r\n        playerAceCount = 0;\r\n\r\n        for (int i = 0; i < 2; i++) {\r\n            Card card = deck.remove(deck.size() - 1);\r\n            playerHand.add(card);\r\n            playerSum += card.getValue();\r\n            playerAceCount += card.isAce() ? 1 : 0;\r\n        }\r\n\r\n        gameStarted = false;\r\n        gameEnded = false;\r\n        playerCardsRevealed = false;\r\n    }\r\n\r\n    public void resetGame() {\r\n        startGame();\r\n        playButton.setEnabled(true);\r\n        hitButton.setEnabled(false);\r\n        stayButton.setEnabled(false);\r\n        replayButton.setEnabled(false);\r\n        wrocButton.setEnabled(true);\r\n    }\r\n\r\n    public void buildDeck() {\r\n        deck = new ArrayList<Card>();\r\n        String[] values = {\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\"};\r\n        String[] types = {\"C\", \"D\", \"H\", \"S\"};\r\n\r\n        for (int i = 0; i < types.length; i++) {\r\n            for (int j = 0; j < values.length; j++) {\r\n                Card card = new Card(values[j], types[i]);\r\n                deck.add(card);\r\n            }\r\n        }\r\n    }\r\n\r\n    public void shuffleDeck() {\r\n        for (int i = 0; i < deck.size(); i++) {\r\n            int j = random.nextInt(deck.size());\r\n            Card currCard = deck.get(i);\r\n            Card randomCard = deck.get(j);\r\n            deck.set(i, randomCard);\r\n            deck.set(j, currCard);\r\n        }\r\n    }\r\n\r\n    public int reducePlayerAce() {\r\n        while (playerSum > 21 && playerAceCount > 0) {\r\n            playerSum -= 10;\r\n            playerAceCount -= 1;\r\n        }\r\n        return playerSum;\r\n    }\r\n\r\n    public int reduceDealerAce() {\r\n        while (dealerSum > 21 && dealerAceCount > 0) {\r\n            dealerSum -= 10;\r\n            dealerAceCount -= 1;\r\n        }\r\n        return dealerSum;\r\n    }\r\n}
===================================================================
diff --git a/src/BlackJack.java b/src/BlackJack.java
--- a/src/BlackJack.java	(revision 5211e1dd1cfc3cb0cc5a9ecf68b5e38baeb04725)
+++ b/src/BlackJack.java	(date 1737515178556)
@@ -160,17 +160,18 @@
         gamePanel.setBackground(new Color(53, 101, 77));
         frame.add(gamePanel);
 
+        buttonPanel.add(playButton);
         buttonPanel.add(hitButton);
         buttonPanel.add(stayButton);
         buttonPanel.add(replayButton);
         buttonPanel.add(wrocButton);
-        buttonPanel.add(playButton);
+
         frame.add(buttonPanel, BorderLayout.SOUTH);
 
         hitButton.setEnabled(false);
         stayButton.setEnabled(false);
         replayButton.setEnabled(false);
-        wrocButton.setEnabled(false);
+        wrocButton.setEnabled(true);
         playButton.setEnabled(true);
 
         hitButton.addActionListener(new ActionListener() {
@@ -234,6 +235,7 @@
                 stayButton.setEnabled(true);
                 playButton.setEnabled(false);
                 replayButton.setEnabled(false);
+                wrocButton.setEnabled(false);
                 gamePanel.repaint();
             }
         });
